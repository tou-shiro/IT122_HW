<html>
<head>
    <title>React App Demo</title>

    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>

    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <!-- Don't use this in production: -->
    <!-- vite?  build too? -->
</head>

<body>

<div id="root"></div>
<script type="text/babel">

    //const items = <%- cars %>;
    //const items = <%- JSON.stringify(cars) %>;
    //const items = JSON.parse(<%- JSON.stringify(cars) %>);
    const items = JSON.parse(<%- JSON.stringify(cars) %>);


    console.log("items got from db");
    console.log(items);

    const ListItems = (props) => {
        console.log("props.items");
        console.log(props.items);
      const listItems = props.items.map((item) =>  (
        <li key={item.model} onClick={props.clickHandler}>
            {item.model}
        </li>
      ));
      return  <ul> {listItems}</ul>;
    };

    const Detail = (props) => {
        return (
            <div>
            <h3>Car Details</h3>
            { props.item &&
              <form>
                <b>Model</b>: <input type="text" name="model" value={props.item.model || ""} onChange={props.changeHandler} /><br/>
                <b>Make</b>: <input type="text" name="make" value={props.item.make ||  ""} onChange={props.changeHandler} /><br/>
                <b>Year</b>: <input type="text" name="year" value={props.item.year || ""} onChange={props.changeHandler} /><br/>
                <b>Color</b>: <input type="text" name="color" value={props.item.color || ""} onChange={props.changeHandler} /><br/>
                <button type="button" onClick={props.clearHandler}>Clear</button> 
              </form>
            }
            </div>
        )
    };

    const App = () => {

        const [selectedItem, setSelectedItem] = React.useState(null);
        const [items, setItems] = React.useState(items);

        const itemClicked = (e) => {
            console.log('item clicked');
            console.log(e.target.innerText);

            //let found = items.find(item => { return item.model == e.target.innerText});
            const found = items.find(item => item.model === e.target.innerText);

            console.log(found)
            setSelectedItem(found);
            //setOriginalItem({ ...found });
        };

        const itemChanged = (e) => {
            let field = e.target.name;
            //let newItem = { ...selectedItem };
            //newItem[field] = e.target.value;
            const newItem = { ...selectedItem, [field]: e.target.value };
            console.log("newItem");
            console.log(newItem);

            //const updatedItems = [...items];
            //map
            setSelectedItem(newItem);


            const updatedItems = items.map(item => item.model === newItem.model ? newItem : item);
            setItems(updatedItems);

            //updatedItems.push(newItem);
            //setSelectedItem(newItem);
            //setItems([...items, newItem]);
            //setItems(items.push(newItem));

            //setItems(updatedItems);
          //  setSelectedItem(newItem);

            //);

            //setItems(updatedItems);
           // setSelectedItem(newItem);

      };

        const clearItem = () => {
        //    setSelectedItem({ ...originalItem });
        // i misunderstood...  clear means clears the text fields...
        setSelectedItem(null);
        };

      return (
      <div>
        <h2>IT122 JavaScript + React Project</h2>

        <ListItems items={items} clickHandler={itemClicked} />
        {/* new components */}
        <hr />
        <Detail 
          item={selectedItem} 
          changeHandler={itemChanged} 
          clearHandler={clearItem}
          saveHandler={saveItem}
          />
       </div>
        );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
</script>
</body>
</html>